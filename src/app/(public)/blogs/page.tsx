"use client";
import React from "react";
import { IBlog } from "@/interfaces/blog";
import BlogCard from "@/components/BlogCard";
import Link from "next/link";
import { Button } from "@/components/ui/button";
import { HiPencilSquare } from "react-icons/hi2";

const Blogs = () => {
  const localBlogs = JSON.parse(localStorage.getItem("blogs") ?? "[]") as IBlog[];

  return (
    <div className="container flex h-[60vh] w-full flex-col items-center">
      {localBlogs.length === 0 && (
        <div className="flex h-full w-full flex-col items-center justify-end">
          <p className="text-2xl">There is no blogs available</p>
          <p className="text-muted-foreground">You can also Write your own blogs</p>
          <Link href={`/new-blog`}>
            <Button
              variant={"outline"}
              size={"sm"}
              className="mt-4 w-20 gap-1 rounded-full"
            >
              <HiPencilSquare className="text-sm" />
              Write
            </Button>
          </Link>
        </div>
      )}
      <div className="mt-24 grid grid-cols-1 gap-5 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4">
        {localBlogs.map((blog) => {
          return (
            <BlogCard
              blog={blog}
              key={blog.id}
            />
          );
        })}
      </div>
    </div>
  );
};

export default Blogs;

// eslint-disable-next-line
const obj = [
  {
    id: `1727509555419`,
    title: "How to install and setup NGINX in Windows 11 [2024]",
    thumbnail:
      "https://i.ytimg.com/vi/DKXdkXCgtCQ/hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLCGXPE9SQDV5ejJX6xLz8dDp0SzyA",
    content:
      '<picture>\n  <source media="(prefers-color-scheme: dark)" srcset="https://github.com/user-attachments/assets/9335b488-ffcc-4157-8364-2370a0b70ad0">\n  <source media="(prefers-color-scheme: light)" srcset="https://github.com/user-attachments/assets/3a7eeb08-1133-47f5-859c-fad4f5a6a013">\n  <img alt="NGINX Banner">\n</picture>\n\nNGINX (pronounced "engine x" or "en-jin-eks") is the world\'s most popular Web Server, high performance Load Balancer, Reverse Proxy, API Gateway and Content Cache.\n\nNGINX is free and open source software, distributed under the terms of a simplified [2-clause BSD-like license](LICENSE).\n\nEnterprise distributions, commercial support and training are available from [F5, Inc](https://www.f5.com/products/nginx).\n\n> [!IMPORTANT]\n> The goal of this README is to provide a basic, structured introduction to NGINX for novice users. Please refer to the [full NGINX documentation](https://nginx.org/en/docs/) for detailed information on [installing](https://nginx.org/en/docs/install.html), [building](https://nginx.org/en/docs/configure.html), [configuring](https://nginx.org/en/docs/dirindex.html), [debugging](https://nginx.org/en/docs/debugging_log.html), and more. These documentation pages also contain a more detailed [Beginners Guide](https://nginx.org/en/docs/beginners_guide.html), How-Tos, [Development guide](https://nginx.org/en/docs/dev/development_guide.html), and a complete module and [directive reference](https://nginx.org/en/docs/dirindex.html).\n\n# Table of contents\n- [How it works](#how-it-works)\n  - [Modules](#modules)\n  - [Configurations](#configurations)\n  - [Runtime](#runtime)\n- [Downloading and installing](#downloading-and-installing)\n  - [Stable and Mainline binaries](#stable-and-mainline-binaries)\n  - [Linux binary installation process](#linux-binary-installation-process)\n  - [FreeBSD installation process](#freebsd-installation-process)\n  - [Windows executables](#windows-executables)\n  - [Dynamic modules](#dynamic-modules)\n- [Getting started with NGINX](#getting-started-with-nginx)\n  - [Installing SSL certificates and enabling TLS encryption](#installing-ssl-certificates-and-enabling-tls-encryption)\n  - [Load Balancing](#load-balancing)\n  - [Rate limiting](#rate-limiting)\n  - [Content caching](#content-caching)\n- [Building from source](#building-from-source)\n  - [Installing dependencies](#installing-dependencies)\n  - [Cloning the NGINX GitHub repository](#cloning-the-nginx-github-repository)\n  - [Configuring the build](#configuring-the-build)\n  - [Compiling](#compiling)\n  - [Location of binary and installation](#location-of-binary-and-installation)\n  - [Running and testing the installed binary](#running-and-testing-the-installed-binary)\n- [Asking questions and reporting issues](#asking-questions-and-reporting-issues)\n- [Contributing code](#contributing-code)\n- [Additional help and resources](#additional-help-and-resources)\n- [Changelog](#changelog)\n- [License](#license)\n\n# How it works\nNGINX is installed software with binary packages available for all major operating systems and Linux distributions. See [Tested OS and Platforms](https://nginx.org/en/#tested_os_and_platforms) for a full list of compatible systems.\n\n> [!IMPORTANT]\n> While nearly all popular Linux-based operating systems are distributed with a community version of nginx, we highly advise installation and usage of official [packages](https://nginx.org/en/linux_packages.html) or sources from this repository. Doing so ensures that you\'re using the most recent release or source code, including the latest feature-set, fixes and security patches.\n\n## Modules\nNGINX is comprised of individual modules, each extending core functionality by providing additional, configurable features. See "Modules reference" at the bottom of [nginx documentation](https://nginx.org/en/docs/) for a complete list of official modules.\n\nNGINX modules can be built and distributed as static or dynamic modules. Static modules are defined at build-time, compiled, and distributed in the resulting binaries. See [Dynamic Modules](#dynamic-modules) for more information on how they work, as well as, how to obtain, install, and configure them.\n\n> [!TIP]\n> You can issue the following command to see which static modules your NGINX binaries were built with:\n```bash\nnginx -V\n```\n> See [Configuring the build](#configuring-the-build) for information on how to include specific Static modules into your nginx build.\n\n\n## Configurations\nNGINX is highly flexible and configurable. Provisioning the software is achieved via text-based config file(s) accepting parameters called "[Directives](https://nginx.org/en/docs/dirindex.html)". See [Configuration File\'s Structure](https://nginx.org/en/docs/beginners_guide.html#conf_structure) for a comprehensive description of how NGINX configuration files work.\n\n> [!NOTE]\n> The set of directives available to your distribution of NGINX is dependent on which [modules](#modules) have been made available to it.\n\n## Runtime\nRather than running in a single, monolithic process, NGINX is architected to scale beyond Operating System process limitations by operating as a collection of processes. They include:\n- A "master" process that maintains worker processes, as well as, reads and evaluates configuration files.\n- One or more "worker" processes that process data (eg. HTTP requests).\n\nThe number of [worker processes](https://nginx.org/en/docs/ngx_core_module.html#worker_processes) is defined in the configuration file and may be fixed for a given configuration or automatically adjusted to the number of available CPU cores. In most cases, the latter option optimally balances load across available system resources, as NGINX is designed to efficiently distribute work across all worker processes.\n\n> [!TIP]\n> Processes synchronize data through shared memory. For this reason, many NGINX directives require the allocation of shared memory zones. As an example, when configuring [rate limiting](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req), connecting clients may need to be tracked in a [common memory zone](https://nginx.org/en/docs/http/ngx_http_limit_req_module.html#limit_req_zone) so all worker processes can know how many times a particular client has accessed the server in a span of time.\n\n# Downloading and installing\nFollow these steps to download and install precompiled NGINX binaries. You may also choose to [build NGINX locally from source code](#building-from-source).\n\n## Stable and Mainline binaries\nNGINX binaries are built and distributed in two versions: stable and mainline. Stable binaries are built from stable branches and only contain critical fixes backported from the mainline version. Mainline binaries are built from the [master branch](https://github.com/nginx/nginx/tree/master) and contain the latest features and bugfixes. You\'ll need to [decide which is appropriate for your purposes](https://docs.nginx.com/nginx/admin-guide/installing-nginx/installing-nginx-open-source/#choosing-between-a-stable-or-a-mainline-version).\n\n## Linux binary installation process\nThe NGINX binary installation process takes advantage of package managers native to specific Linux distributions. For this reason, first-time installations involve adding the official NGINX package repository to your system\'s package manager. Follow [these steps](https://nginx.org/en/linux_packages.html) to download, verify, and install NGINX binaries using the package manager appropriate for your Linux distribution.\n\n### Upgrades\nFuture upgrades to the latest version can be managed using the same package manager without the need to manually download and verify binaries.\n\n## FreeBSD installation process\nFor more information on installing NGINX on FreeBSD system, visit https://nginx.org/en/docs/install.html\n\n## Windows executables\nWindows executables for mainline and stable releases can be found on the main [NGINX download page](https://nginx.org/en/download.html). Note that the current implementation of NGINX for Windows is at the Proof-of-Concept stage and should only be used for development and testing purposes. For additional information, please see [nginx for Windows](https://nginx.org/en/docs/windows.html).\n\n## Dynamic modules\nNGINX version 1.9.11 added support for [Dynamic Modules](https://nginx.org/en/docs/ngx_core_module.html#load_module). Unlike Static modules, dynamically built modules can be downloaded, installed, and configured after the core NGINX binaries have been built. [Official dynamic module binaries](https://nginx.org/en/linux_packages.html#dynmodules) are available from the same package repository as the core NGINX binaries described in previous steps.\n\n> [!TIP]\n> [NGINX JavaScript (njs)](https://github.com/nginx/njs), is a popular NGINX dynamic module that enables the extension of core NGINX functionality using familiar JavaScript syntax.\n\n> [!IMPORTANT]\n> If desired, dynamic modules can also be built statically into NGINX at compile time.\n\n# Getting started with NGINX\nFor a gentle introduction to NGINX basics, please see our [Beginner’s Guide](https://nginx.org/en/docs/beginners_guide.html).\n\n## Installing SSL certificates and enabling TLS encryption\nSee [Configuring HTTPS servers](https://nginx.org/en/docs/http/configuring_https_servers.html) for a quick guide on how to enable secure traffic to your NGINX installation.\n\n## Load Balancing\nFor a quick start guide on configuring NGINX as a Load Balancer, please see [Using nginx as HTTP load balancer](https://nginx.org/en/docs/http/load_balancing.html).\n\n## Rate limiting\nSee our [Rate Limiting with NGINX](https://blog.nginx.org/blog/rate-limiting-nginx) blog post for an overview of core concepts for provisioning NGINX as an API Gateway.\n\n## Content caching\nSee [A Guide to Caching with NGINX and NGINX Plus](https://blog.nginx.org/blog/nginx-caching-guide) blog post for an overview of how to use NGINX as a content cache (e.g. edge server of a content delivery network).\n\n# Building from source\nThe following steps can be used to build NGINX from source code available in this repository.\n\n## Installing dependencies\nMost Linux distributions will require several dependencies to be installed in order to build NGINX. The following instructions are specific to the `apt` package manager, widely available on most Ubuntu/Debian distributions and their derivatives.\n\n> [!TIP]\n> It is always a good idea to update your package repository lists prior to installing new packages.\n> ```bash\n> sudo apt update\n> ```\n\n### Installing compiler and make utility\nUse the following command to install the GNU C compiler and Make utility.\n\n```bash\nsudo apt install gcc make\n```\n\n### Installing dependency libraries\n\n```bash\nsudo apt install libpcre3-dev zlib1g-dev\n```\n\n> [!WARNING]\n> This is the minimal set of dependency libraries needed to build NGINX with rewriting and gzip capabilities. Other dependencies may be required if you choose to build NGINX with additional modules. Monitor the output of the `configure` command discussed in the following sections for information on which modules may be missing. For example, if you plan to use SSL certificates to encrypt traffic with TLS, you\'ll need to install the OpenSSL library. To do so, issue the following command.\n\n>```bash\n>sudo apt install libssl-dev\n\n## Cloning the NGINX GitHub repository\nUsing your preferred method, clone the NGINX repository into your development directory. See [Cloning a GitHub Repository](https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository) for additional help.\n\n```bash\ngit clone https://github.com/nginx/nginx.git\n```\n\n## Configuring the build\nPrior to building NGINX, you must run the `configure` script with [appropriate flags](https://nginx.org/en/docs/configure.html). This will generate a Makefile in your NGINX source root directory that can then be used to compile NGINX with [options specified during configuration](https://nginx.org/en/docs/configure.html).\n\nFrom the NGINX source code repository\'s root directory:\n\n```bash\nauto/configure\n```\n\n> [!IMPORTANT]\n> Configuring the build without any flags will compile NGINX with the default set of options. Please refer to https://nginx.org/en/docs/configure.html for a full list of available build configuration options.\n\n## Compiling\nThe `configure` script will generate a `Makefile` in the NGINX source root directory upon successful execution. To compile NGINX into a binary, issue the following command from that same directory:\n\n```bash\nmake\n```\n\n## Location of binary and installation\nAfter successful compilation, a binary will be generated at `<NGINX_SRC_ROOT_DIR>/objs/nginx`. To install this binary, issue the following command from the source root directory:\n\n```bash\nsudo make install\n```\n\n> [!IMPORTANT]\n> The binary will be installed into the `/usr/local/nginx/` directory.\n\n## Running and testing the installed binary\nTo run the installed binary, issue the following command:\n\n```bash\nsudo /usr/local/nginx/sbin/nginx\n```\n\nYou may test NGINX operation using `curl`.\n\n```bash\ncurl localhost\n```\n\nThe output of which should start with:\n\n```html\n<!DOCTYPE html>\n<html>\n<head>\n<title>Welcome to nginx!</title>\n```\n\n# Asking questions and reporting issues\nWe encourage you to engage with us.\n- [NGINX GitHub Discussions](https://github.com/nginx/nginx/discussions), is the go-to place to start asking questions and sharing your thoughts.\n- Our [GitHub Issues](https://github.com/nginx/nginx/issues) page offers space to submit and discuss specific issues, report bugs, and suggest enhancements.\n\n# Contributing code\nPlease see the [Contributing](CONTRIBUTING.md) guide for information on how to contribute code.\n\n# Additional help and resources\n- See the [NGINX Community Blog](https://blog.nginx.org/) for more tips, tricks and HOW-TOs related to NGINX and related projects.\n- Access [nginx.org](https://nginx.org/), your go-to source for all documentation, information and software related to the NGINX suite of projects.\n\n# Changelog\nSee our [changelog](https://nginx.org/en/CHANGES) to keep track of updates.\n\n# License\n[2-clause BSD-like license](LICENSE)\n\n---\nAdditional documentation available at: https://nginx.org/en/docs',
    createdAt: new Date(1727509555419),
    reads: 1,
    userName: "The AbhiPatel",
  },
  {
    id: "1727509437483",
    title: "What is Nginx?",
    thumbnail:
      "https://i.ytimg.com/vi/b_B1BEShfBc/hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLDP3LbG2-bvJ5kG9InkHriAfcOe6g",
    content:
      "# Nginx Configuration Snippets\nA collection of useful Nginx configuration snippets inspired by\n[.htaccess snippets](https://github.com/phanan/htaccess).\n\n## Table of Contents\n- [The Nginx Command](#the-nginx-command)\n- [Rewrite and Redirection](#rewrite-and-redirection)\n    - [Force www](#force-www)\n    - [Force no-www](#force-no-www)\n    - [Force HTTPS](#force-https)\n    - [Force Trailing Slash](#force-trailing-slash)\n    - [Redirect a Single Page](#redirect-a-single-page)\n    - [Redirect an Entire Site](#redirect-an-entire-site)\n    - [Redirect an Entire Sub Path](#redirect-an-entire-sub-path)\n- [Performance](#performance)\n    - [Contents Caching](#contents-caching)\n    - [Gzip Compression](#gzip-compression)\n    - [Open File Cache](#open-file-cache)\n    - [SSL Cache](#ssl-cache)\n    - [Upstream Keepalive](#upstream-keepalive)\n- [Monitoring](#monitoring)\n- [Security](#security)\n    - [Enable Basic Authentication](#enable-basic-authentication)\n    - [Only Allow Access From Localhost](#only-allow-access-from-localhost)\n    - [Secure SSL settings](#secure-ssl-settings)\n- [Miscellaneous](#miscellaneous)\n    - [Sub-Request Upon Completion](#sub-request-upon-completion)\n    - [Enable Cross Origin Resource Sharing](#enable-cross-origin-resource-sharing)\n- [Links](#links)\n\n## The Nginx Command\nThe `nginx` command can be used to perform some useful actions when Nginx is running.\n\n- Get current Nginx version and its configured compiling parameters: `nginx -V`\n- Test the current Nginx configuration file and / or check its location: `nginx -t`\n- Reload the configuration without restarting Nginx: `nginx -s reload`\n\n\n## Rewrite and Redirection\n\n### Force www\nThe [right way](http://nginx.org/en/docs/http/converting_rewrite_rules.html)\nis to define a separated server for the naked domain and redirect it.\n```nginx\nserver {\n    listen 80;\n    server_name example.org;\n    return 301 $scheme://www.example.org$request_uri;\n}\n\nserver {\n    listen 80;\n    server_name www.example.org;\n    ...\n}\n```\n\nNote that this also works with HTTPS site.\n\n### Force no-www\nAgain, the right way is to define a separated server for the www domain and redirect it.\n```nginx\nserver {\n    listen 80;\n    server_name example.org;\n}\n\nserver {\n    listen 80;\n    server_name www.example.org;\n    return 301 $scheme://example.org$request_uri;\n}\n```\n\n### Force HTTPS\nThis is also handled by the 2 server blocks approach.\n```nginx\nserver {\n    listen 80;\n    return 301 https://$host$request_uri;\n}\n\nserver {\n    listen 443 ssl;\n\n    # let the browsers know that we only accept HTTPS\n    add_header Strict-Transport-Security max-age=2592000;\n\n    ...\n}\n```\n\n### Force Trailing Slash\nThis configuration only add trailing slash to URL that does not contain a dot because you probably don't want to add that trailing slash to your static files.\n[Source](http://stackoverflow.com/questions/645853/add-slash-to-the-end-of-every-url-need-rewrite-rule-for-nginx).\n```nginx\nrewrite ^([^.]*[^/])$ $1/ permanent;\n```\n\n### Redirect a Single Page\n```nginx\nserver {\n    location = /oldpage.html {\n        return 301 http://example.org/newpage.html;\n    }\n}\n```\n\n### Redirect an Entire Site\n```nginx\nserver {\n    server_name old-site.com\n    return 301 $scheme://new-site.com$request_uri;\n}\n```\n\n### Redirect an Entire Sub Path\n```nginx\nlocation /old-site {\n    rewrite ^/old-site/(.*) http://example.org/new-site/$1 permanent;\n}\n```\n\n\n## Performance\n\n### Contents Caching\nAllow browsers to cache your static contents for basically forever. Nginx will set both `Expires` and `Cache-Control` header for you.\n```nginx\nlocation /static {\n    root /data;\n    expires max;\n}\n```\n\nIf you want to ask the browsers to **never** cache the response (e.g. for tracking requests), use `-1`.\n```nginx\nlocation = /empty.gif {\n    empty_gif;\n    expires -1;\n}\n```\n\n### Gzip Compression\n```nginx\ngzip  on;\ngzip_buffers 16 8k;\ngzip_comp_level 6;\ngzip_http_version 1.1;\ngzip_min_length 256;\ngzip_proxied any;\ngzip_vary on;\ngzip_types\n    text/xml application/xml application/atom+xml application/rss+xml application/xhtml+xml image/svg+xml\n    text/javascript application/javascript application/x-javascript\n    text/x-json application/json application/x-web-app-manifest+json\n    text/css text/plain text/x-component\n    font/opentype application/x-font-ttf application/vnd.ms-fontobject\n    image/x-icon;\ngzip_disable  \"msie6\";\n```\n\n### Open File Cache\nIf you have _a lot_ of static files to serve through Nginx then caching of the files' metadata (not the actual files' contents) can save some latency.\n```nginx\nopen_file_cache max=1000 inactive=20s;\nopen_file_cache_valid 30s;\nopen_file_cache_min_uses 2;\nopen_file_cache_errors on;\n```\n\n### SSL Cache\nEnable SSL cache for SSL sessions resumption, so that sub sequent SSL/TLS connection handshakes can be shortened and reduce total SSL overhead.\n```nginx\nssl_session_cache shared:SSL:10m;\nssl_session_timeout 10m;\n```\n\n### Upstream Keepalive\nEnable the upstream connection cache for better reuse of connections to upstream servers. [Source](http://nginx.org/en/docs/http/ngx_http_upstream_module.html#keepalive).\n```nginx\nupstream backend {\n    server 127.0.0.1:8080;\n    keepalive 32;\n}\n\nserver {\n    ...\n    location /api/ {\n        proxy_pass http://backend;\n        proxy_http_version 1.1;\n        proxy_set_header Connection \"\";\n    }\n}\n```\n\n\n## Monitoring\n\nThe [Stub Status](http://nginx.org/en/docs/http/ngx_http_stub_status_module.html), which is not built by default, is a very simple to setup module but only provide basic status of Nginx.\n```nginx\nlocation /status {\n    stub_status on;\n    access_log off;\n}\n```\n\nIt provides the following status for the whole Nginx server in plain text(!) format:\n- Client connections: accepted, handled, active (includes reading, writing and waiting).\n- Total number of client requests.\n\n**[Shameless Plug]** A _better_ way to capture Nginx status can be added by using [Luameter](https://luameter.com) which is a bit more complicated to setup and required the Nginx Lua module (which is awesome). It provides following metrics for each [configurable group](https://luameter.com/configuration) as a JSON API:\n- Total number of requests / responses.\n- Total number of responses groupped by status code: 1xx, 2xx, 3xx, 4xx, 5xx.\n- Total bytes received from / sent to client.\n- Sampled latency snapshot for estimation of: mean, max, median, 99th percentile, etc., latency.\n- Moving average rate of requests for easier monitoring and predicting.\n- And [some more](https://luameter.com/metrics).\n\n[Here is a sample dashboard built with Luameter's metrics](https://luameter.com/demo).\n\n[ngxtop](https://github.com/lebinh/ngxtop) is also a good way to check for Nginx status and checking / troubleshooting a live server.\n\n\n## Security\n\n### Enable Basic Authentication\nYou will need a user password file somewhere first.\n```\nname:{PLAIN}plain-text-password\n```\n\nThen add below config to `server`/`location` block that need to be protected.\n```nginx\nauth_basic \"This is Protected\";\nauth_basic_user_file /path/to/password-file;\n```\n\n### Only Allow Access From Localhost\n```nginx\nlocation /local {\n    allow 127.0.0.1;\n    deny all;\n    ...\n}\n```\n\n### Secure SSL settings\n- Disable SSLv3 which is enabled by default. This prevents [POODLE SSL Attack](http://nginx.com/blog/nginx-poodle-ssl/).\n- Ciphers that best allow protection from Beast. [Mozilla Server Side TLS and Nginx]( https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx)\n```nginx\n# don’t use SSLv3 ref: POODLE CVE-2014-356 - http://nginx.com/blog/nginx-poodle-ssl/\nssl_protocols  TLSv1 TLSv1.1 TLSv1.2;  \n\n# Ciphers set to best allow protection from Beast, while providing forwarding secrecy, as defined by Mozilla (Intermediate Set) - https://wiki.mozilla.org/Security/Server_Side_TLS#Nginx\n    ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';\nssl_prefer_server_ciphers  on;\n\n```\n\n## Miscellaneous\n\n### Sub-Request Upon Completion\nThere are some cases that you want to pass the request to another backend _in addition to and after_ serving it. One use case is to track the number of completed downloads by calling an API after user completed download a file. Another use case is for tracking request where you want to return as fast as possible (perhaps with an `empty_gif`) and then do the actual recording in background. The [post_action](http://wiki.nginx.org/HttpCoreModule#post_action) that allows you to define a sub-request that will be fired upon completion of the current request are [perfect solution](http://mailman.nginx.org/pipermail/nginx/2008-April/004524.html) for these use cases.\n```nginx\nlocation = /empty.gif {\n    empty_gif;\n    expires -1;\n    post_action @track; \n}\n\nlocation @track {\n    internal;\n    proxy_pass http://tracking-backend;\n}\n```\n\n### Enable Cross Origin Resource Sharing\nSimple, wide-open configuration to allow cross-domain requests to your server.\n```nginx\nlocation ~* \\.(eot|ttf|woff) {\n    add_header Access-Control-Allow-Origin *;\n}\n```\n\n\n## Links\nSome other awesome resources for configuring Nginx:\n\n- [Nginx Official Guide](http://nginx.com/resources/admin-guide/)\n- [HTML 5 Boilerplate's Sample Nginx Configuration](https://github.com/h5bp/server-configs-nginx)\n- [Nginx Pitfalls](http://wiki.nginx.org/Pitfalls)",
    createdAt: new Date(1727509437483),
    reads: 1,
    userName: "The AbhiPatel",
  },
  {
    id: "1727509307780",
    title: "How to Install and Configure NGINX Web Server in Ubuntu 22.04 LTS",
    thumbnail:
      "https://i.ytimg.com/vi/7YqlP7HYU1g/hq720.jpg?sqp=-oaymwEcCNAFEJQDSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLABq8pBMMf0QrwgofuPFeSKdWfHYA",
    content:
      "**Namaskar Developers!!**\n\n# How to Install and Configure NGINX Web Server in Ubuntu 22.04 LTS\n\n- let's take small steps \n- step 1\n- step 2\n- step 3\n- step 4\n-  step 5\n \n## This is  How you can configure the Nginx setup",
    createdAt: new Date(1727509307780),
    reads: 1,
    userName: "The AbhiPatel",
  },
];
